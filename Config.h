#ifndef CONFIG_H
#define CONFIG_H

#include <Arduino.h>

// =============================================================================
// КОНФИГУРАЦИЯ ЭНКОДЕРА ШПИНДЕЛЯ
// =============================================================================

// Количество импульсов энкодера на один оборот шпинделя (600 меток на диске)
const int ENCODER_PPR = 600;

// Люфт энкодера в импульсах - компенсация механического люфта при смене направления
const int ENCODER_BACKLASH = 3;

// Контакты энкодера шпинделя. Поменять значения если направление вращения неправильное
#define ENC_A 7
#define ENC_B 15

// Полное число счетных импульсов на оборот (учет каналов A и B)
const int ENCODER_STEPS_INT = ENCODER_PPR * 2;

// Фильтр импульсов энкодера. Импульсы короче этого значения игнорируются (в тактах)
const int ENCODER_FILTER = 2;

// Предел счетчика импульсов до сброса (защита от переполнения)
const int PCNT_LIM = 31000;

// Значение счетчика при котором выполняется принудительный сброс
const int PCNT_CLEAR = 30000;

// =============================================================================
// КОНФИГУРАЦИЯ ОСИ Z (ОСНОВНОЙ ХОДОВОЙ ВИНТ)
// =============================================================================

// Шаг ходового винта в деци-микронах (10^-7 метра) - 2мм винт
const long SCREW_Z_DU = 20000;

// Количество шагов двигателя на один оборот (с учетом микрошага)
const long MOTOR_STEPS_Z = 800;

// Начальная скорость двигателя, шагов в секунду
const long SPEED_START_Z = 2 * MOTOR_STEPS_Z;

// Ускорение двигателя, шагов в секунду²
const long ACCELERATION_Z = 30 * MOTOR_STEPS_Z;

// Максимальная скорость при ручном управлении, шагов в секунду
const long SPEED_MANUAL_MOVE_Z = 6 * MOTOR_STEPS_Z;

// Инвертировать направление (true/false) если каретка движется "влево" при нажатии "вправо"
const bool INVERT_Z = false;

// Требуется ли отключение драйвера при простое (false для closed-loop, true для open-loop)
const bool NEEDS_REST_Z = false;

// Максимальное перемещение в мм (ограничение станины станка)
const long MAX_TRAVEL_MM_Z = 300;

// Люфт механической передачи в деци-микронах (0.65мм)
const long BACKLASH_DU_Z = 6500;

// Обозначение оси для отображения и G-кода
const char NAME_Z = 'Z';

// =============================================================================
// КОНФИГУРАЦИЯ ОСИ X (ПОПЕРЕЧНЫЙ СУППОРТ)
// =============================================================================

// Шаг ходового винта в деци-микронах - 1.25мм винт с редукцией 3x
const long SCREW_X_DU = 12500;

// Количество шагов двигателя (800 шагов с редукцией 3x)
const long MOTOR_STEPS_X = 2400;

// Начальная скорость двигателя, шагов в секунду
const long SPEED_START_X = MOTOR_STEPS_X;

// Ускорение двигателя, шагов в секунду²
const long ACCELERATION_X = 10 * MOTOR_STEPS_X;

// Максимальная скорость при ручном управлении, шагов в секунду
const long SPEED_MANUAL_MOVE_X = 3 * MOTOR_STEPS_X;

// Инвертировать направление (true/false) если каретка движется неправильно
const bool INVERT_X = true;

// Требуется ли отключение драйвера при простое
const bool NEEDS_REST_X = false;

// Максимальное перемещение в мм (ограничение поперечного суппорта)
const long MAX_TRAVEL_MM_X = 100;

// Люфт механической передачи в деци-микронах (0.15мм)
const long BACKLASH_DU_X = 1500;

// Обозначение оси для отображения и G-кода
const char NAME_X = 'X';

// =============================================================================
// КОНФИГУРАЦИЯ ОСИ A1 (ДЕЛИТЕЛЬНАЯ ГОЛОВКА)
// =============================================================================

// Активна ли ось (подключена ли делительная головка)
const bool ACTIVE_A1 = false;

// Является ли ось вращательной (true) или линейной (false)
const bool ROTARY_A1 = true;

// Количество шагов двигателя для одного оборота червячной передачи
const long MOTOR_STEPS_A1 = 300;

// Градусы умноженные на 10000 которые проходит шпиндель за 1 оборот червяка. 2 градуса.
const long SCREW_A1_DU = 20000;

// Начальная скорость двигателя, шагов в секунду
const long SPEED_START_A1 = 1600;

// Ускорение двигателя, шагов в секунду²
const long ACCELERATION_A1 = 16000;

// Максимальная скорость при ручном управлении, шагов в секунду
const long SPEED_MANUAL_MOVE_A1 = 3200;

// Инвертировать направление вращения
const bool INVERT_A1 = false;

// Требуется ли отключение драйвера при простое
const bool NEEDS_REST_A1 = false;

// Максимальное перемещение в мм (вероятно не имеет смысла поворачивать делительную головку многократно)
const long MAX_TRAVEL_MM_A1 = 360;

// Люфт червячной передачи (предполагается отсутствие люфта)
const long BACKLASH_DU_A1 = 0;

// Обозначение оси для отображения и G-кода
const char NAME_A1 = 'C';

// =============================================================================
// КОНФИГУРАЦИЯ РУЧНЫХ ЭНКОДЕРОВ (МАХОВИКОВ)
// =============================================================================

// Использовать ли генератор импульсов на контактах A11-A13 для управления движением
const bool PULSE_1_USE = false;

// Какой осью управлять энкодером A11-A13 (NAME_Z или NAME_X)
const char PULSE_1_AXIS = NAME_Z;

// Инвертировать направление движения оси при вращении энкодера
const bool PULSE_1_INVERT = false;

// Использовать ли генератор импульсов на контактах A21-A23 для управления движением
const bool PULSE_2_USE = false;

// Какой осью управлять энкодером A21-A23 (NAME_Z или NAME_X)
const char PULSE_2_AXIS = NAME_X;

// Инвертировать направление движения оси при вращении энкодера
const bool PULSE_2_INVERT = true;

// Импульсов на оборот ручных маховиков
const float PULSE_PER_REVOLUTION = 100;

// Минимальная длительность импульса в микросекундах для регистрации (защита от помех)
const long PULSE_MIN_WIDTH_US = 1000;

// Половина люфта для предотвращения ложных реверсов при движении маховиком
const long PULSE_HALF_BACKLASH = 2;

// =============================================================================
// СИСТЕМНЫЕ КОНСТАНТЫ И ОГРАНИЧЕНИЯ
// =============================================================================

// Максимальный шаг резьбы в деци-микронах (не более 1 дюйма)
const long DUPR_MAX = 254000;

// Максимальное число заходов резьбы (не более 124-заходной резьбы)
const int STARTS_MAX = 124;

// Максимальное число проходов при автоматической обработке
const long PASSES_MAX = 999;

// Безопасное расстояние отвода инструмента в деци-микронах (0.5мм)
const long SAFE_DISTANCE_DU = 5000;

// Задержка между сохранениями в EEPROM (5 секунд) - защита от износа памяти
const long SAVE_DELAY_US = 5000000;

// Задержка после смены направления шагового двигателя (5 мкс)
const long DIRECTION_SETUP_DELAY_US = 5;

// Задержка после включения драйвера двигателя (100 мс)
const long STEPPED_ENABLE_DELAY_MS = 100;

// =============================================================================
// КОНСТАНТЫ G-CODE ИНТЕРПРЕТАТОРА
// =============================================================================

// Точность линейной интерполяции (0 < x <= 1, меньшие значения ускоряют перемещения G0 и G1)
const float LINEAR_INTERPOLATION_PRECISION = 0.1;

// Допуск ожидания завершения движения в шагах
const long GCODE_WAIT_EPSILON_STEPS = 10;

// Останавливать ли выполнение G-кода при остановке шпинделя
const bool SPINDLE_PAUSES_GCODE = true;

// Минимальные обороты шпинделя для выполнения G-кода (RPM)
const int GCODE_MIN_RPM = 30;

// Скорость подачи по умолчанию для G-кода (деци-микроны в секунду)
const long GCODE_FEED_DEFAULT_DU_SEC = 20000;

// Минимальная скорость подачи для G-кода (деци-микроны в секунду) - F1
const float GCODE_FEED_MIN_DU_SEC = 167;

// =============================================================================
// КОНСТАНТЫ РУЧНОГО УПРАВЛЕНИЯ
// =============================================================================

// Время в миллисекундах для выполнения одного шага при ручном управлении
const long STEP_TIME_MS = 500;

// Время в миллисекундах для ожидания между шагами
const long DELAY_BETWEEN_STEPS_MS = 80;

// Шаги перемещения для метрической системы (в деци-микронах)
const long MOVE_STEP_1 = 10000;     // 1мм
const long MOVE_STEP_2 = 1000;      // 0.1мм  
const long MOVE_STEP_3 = 100;       // 0.01мм

// Шаги перемещения для дюймовой системы (в деци-микронах)
const long MOVE_STEP_IMP_1 = 25400; // 1/10"
const long MOVE_STEP_IMP_2 = 2540;  // 1/100"
const long MOVE_STEP_IMP_3 = 254;   // 1/1000" (1 thou)

// =============================================================================
// ВЕРСИИ СИСТЕМЫ И НАСТРОЙКИ ПАМЯТИ
// =============================================================================

// Версия программного обеспечения (увеличивается при внесении измеримых улучшений)
#define SOFTWARE_VERSION 12

// Версия аппаратного обеспечения (изменяется при другой схеме/энкодере/двигателе)
#define HARDWARE_VERSION 4

// Версия формата хранения настроек (должна изменяться при несовместимых изменениях)
#define PREFERENCES_VERSION 1

// Пространство имен для хранения основных настроек
#define PREF_NAMESPACE "h4"

// Пространство имен для хранения G-код программ
#define GCODE_NAMESPACE "gc"

// =============================================================================
// КОНТАКТЫ ОБОРУДОВАНИЯ (ПИНЫ ESP32)
// =============================================================================

// Контакты оси Z
#define Z_ENA 16
#define Z_DIR 17
#define Z_STEP 18

// Контакты оси X
#define X_ENA 8
#define X_DIR 19
#define X_STEP 20

// Периферия
#define BUZZ 4      // Пьезопищалка
#define SCL 5       // I2C SCL для клавиатуры
#define SDA 6       // I2C SDA для клавиатуры

// Контакты оси A1
#define A11 9
#define A12 10
#define A13 11

// Контакты дополнительных энкодеров
#define A21 12
#define A22 13
#define A23 14

// =============================================================================
// КОДЫ КНОПОК КЛАВИАТУРЫ
// =============================================================================

// Основное управление движением
#define B_LEFT 57       // Кнопка ВЛЕВО
#define B_RIGHT 37      // Кнопка ВПРАВО
#define B_UP 47         // Кнопка ВВЕРХ
#define B_DOWN 67       // Кнопка ВНИЗ
#define B_MINUS 5       // Кнопка МИНУС
#define B_PLUS 64       // Кнопка ПЛЮС
#define B_ON 17         // Кнопка ВКЛ
#define B_OFF 27        // Кнопка ВЫКЛ

// Установка пределов
#define B_STOPL 7       // Левый предел Z
#define B_STOPR 15      // Правый предел Z
#define B_STOPU 6       // Верхний предел X
#define B_STOPD 16      // Нижний предел X

// Функциональные кнопки
#define B_DISPL 14      // Смена отображения
#define B_STEP 24       // Смена шага перемещения
#define B_SETTINGS 34   // Настройки
#define B_MEASURE 54    // Смена системы измерений
#define B_REVERSE 44    // Реверс направления

// Цифровая клавиатура
#define B_0 51          // Цифра 0
#define B_1 41          // Цифра 1
#define B_2 61          // Цифра 2
#define B_3 31          // Цифра 3
#define B_4 2           // Цифра 4
#define B_5 21          // Цифра 5
#define B_6 12          // Цифра 6
#define B_7 11          // Цифра 7
#define B_8 22          // Цифра 8
#define B_9 1           // Цифра 9
#define B_BACKSPACE 32  // Стереть

// Кнопки выбора режимов
#define B_MODE_GEARS 42     // Нормальный режим
#define B_MODE_TURN 52      // Продольное точение
#define B_MODE_FACE 62      // Подрезка торца
#define B_MODE_CONE 3       // Коническое точение
#define B_MODE_CUT 13       // Прорезка
#define B_MODE_THREAD 23    // Нарезание резьбы
#define B_MODE_OTHER 33     // Другие режимы

// Кнопки управления осями
#define B_X 53          // Ноль оси X
#define B_Z 43          // Ноль оси Z
#define B_A 4           // Вкл/выкл оси X
#define B_B 63          // Вкл/выкл оси Z

// =============================================================================
// КЛЮЧИ ДЛЯ ХРАНЕНИЯ В EEPROM
// =============================================================================

#define PREF_VERSION "v"                // Версия формата хранения
#define PREF_DUPR "d"                   // Шаг резьбы
#define PREF_POS_Z "zp"                 // Позиция оси Z
#define PREF_LEFT_STOP_Z "zls"          // Левый упор Z
#define PREF_RIGHT_STOP_Z "zrs"         // Правый упор Z
#define PREF_ORIGIN_POS_Z "zpo"         // Нулевая позиция Z
#define PREF_POS_GLOBAL_Z "zpg"         // Глобальная позиция Z
#define PREF_MOTOR_POS_Z "zpm"          // Позиция двигателя Z
#define PREF_DISABLED_Z "zd"            // Отключена ли ось Z
#define PREF_POS_X "xp"                 // Позиция оси X
#define PREF_LEFT_STOP_X "xls"          // Левый упор X
#define PREF_RIGHT_STOP_X "xrs"         // Правый упор X
#define PREF_ORIGIN_POS_X "xpo"         // Нулевая позиция X
#define PREF_POS_GLOBAL_X "xpg"         // Глобальная позиция X
#define PREF_MOTOR_POS_X "xpm"          // Позиция двигателя X
#define PREF_DISABLED_X "xd"            // Отключена ли ось X
#define PREF_POS_A1 "a1p"               // Позиция оси A1
#define PREF_LEFT_STOP_A1 "a1ls"        // Левый упор A1
#define PREF_RIGHT_STOP_A1 "a1rs"       // Правый упор A1
#define PREF_ORIGIN_POS_A1 "a1po"       // Нулевая позиция A1
#define PREF_POS_GLOBAL_A1 "a1pg"       // Глобальная позиция A1
#define PREF_MOTOR_POS_A1 "a1pm"        // Позиция двигателя A1
#define PREF_DISABLED_A1 "a1d"          // Отключена ли ось A1
#define PREF_SPINDLE_POS "sp"           // Позиция шпинделя
#define PREF_SPINDLE_POS_AVG "spa"      // Усредненная позиция шпинделя
#define PREF_OUT_OF_SYNC "oos"          // Рассинхронизация
#define PREF_SPINDLE_POS_GLOBAL "spg"   // Глобальная позиция шпинделя
#define PREF_SHOW_ANGLE "ang"           // Показывать угол
#define PREF_SHOW_TACHO "rpm"           // Показывать тахометр
#define PREF_STARTS "sta"               // Число заходов
#define PREF_MODE "mod"                 // Режим работы
#define PREF_MEASURE "mea"              // Система измерений
#define PREF_CONE_RATIO "cr"            // Коэффициент конуса
#define PREF_TURN_PASSES "tp"           // Число проходов точения
#define PREF_MOVE_STEP "ms"             // Шаг перемещения
#define PREF_AUX_FORWARD "af"           // Направление вспомогательной оси

// =============================================================================
// РЕЖИМЫ РАБОТЫ СИСТЕМЫ
// =============================================================================

#define MODE_NORMAL 0       // Обычный режим ELS (резьбонарезание)
#define MODE_ASYNC 2        // Асинхронный режим (независимое движение)
#define MODE_CONE 3         // Коническое точение
#define MODE_TURN 4         // Продольное точение
#define MODE_FACE 5         // Подрезка торца
#define MODE_CUT 6          // Прорезка
#define MODE_THREAD 7       // Нарезание резьбы
#define MODE_ELLIPSE 8      // Эллиптическое точение
#define MODE_GCODE 9        // Управление по G-коду
#define MODE_A1 10          // Управление осью A1

// =============================================================================
// СИСТЕМЫ ИЗМЕРЕНИЙ
// =============================================================================

#define MEASURE_METRIC 0    // Метрическая система (мм)
#define MEASURE_INCH 1      // Дюймовая система (дюймы)
#define MEASURE_TPI 2       // Резьба на дюйм (TPI)

// =============================================================================
// ПРИЧИНЫ АВАРИЙНОЙ ОСТАНОВКИ
// =============================================================================

#define ESTOP_NONE 0                // Нормальная работа
#define ESTOP_KEY 1                 // Клавиша нажата при включении
#define ESTOP_POS 2                 // Запрос позиции вне пределов станка
#define ESTOP_MARK_ORIGIN 3         // Не удалось установить нулевую позицию
#define ESTOP_ON_OFF 4              // Не удалось включить/выключить
#define ESTOP_OFF_MANUAL_MOVE 5     // Выключение во время ручного движения

// =============================================================================
// ВСПОМОГАТЕЛЬНЫЕ КОНСТАНТЫ
// =============================================================================

// Погрешность округления TPI (например 80.02tpi показывается как 80tpi)
const float TPI_ROUND_EPSILON = 0.03;

// Удобная float версия ENCODER_STEPS_INT
const float ENCODER_STEPS_FLOAT = ENCODER_STEPS_INT;

// Измерение RPM усредняется по этому числу импульсов энкодера
const long RPM_BULK = ENCODER_STEPS_INT;

// Не обновлять RPM чаще чем раз в секунду (избежание мерцания)
const long RPM_UPDATE_INTERVAL_MICROS = 1000000;

// Начальное значение хэша для дисплея (случайное число которое вряд ли возникнет естественно)
#define LCD_HASH_INITIAL -3845709

// Макросы для удобства работы с пинами
#define DREAD(x) digitalRead(x)
#define DHIGH(x) digitalWrite(x, HIGH)
#define DLOW(x) digitalWrite(x, LOW)
#define DWRITE(x, y) digitalWrite(x, y)

// Задержка в миллисекундах (совместимость с FreeRTOS)
#define DELAY(x) vTaskDelay(x / portTICK_PERIOD_MS);

#endif // CONFIG_H